#As explained in lvl14-->15 password of every level is stored in /etc/bandit_pass/bandit(0..35)  But it can only be accessed by the same user. for eg- password of lvl14 can only be seen by user bandit14 


Level0:  ssh -port 2220 bandit0@bandit.labs.overthewire.org	# passwords are stored in a file named password	

Level0->1:	cat readme	#passwd is stored in this file 
Level1->2:	cat ./-		or	cat <full path of - >	#path of - file can be seen from pwd command. also - file can't be accessed directly using cat - as - is a special keyword used for stdin and stdout
Level2->3:	cat 'spaces in this filename'	or	cat spaces\ in\ this\ filename		#spaces acts as seperators. so we need to use backslash before every space in order to access space not as a keyword or we can write the whole file name in a quotes
Level3->4:	cd inhere
		ls -a
		cat .hidden
Level4->5:	cd inhere
		for x in {0..9}; do file ./-file0$x; done
		 cat ./-file07
Level5->6:	cd inhere
		find . -type f -size 1033c ! -executable #output: ./maybehere07/.file2
		cat <address in output of previous command> ie.- cat ./maybehere07/.file2
Level6->7:	find / -user bandit7 -group bandit6 -size 33c 2>/dev/null		# here because we do not have access to all the permissions, so this command will show a lot of errors also for permission denied and it will be difficult to search file in such messed up output. To resolve this issue, we use 2>/dev/null which redirects stderr(1 for stdout,2 for stderr, 3 for stdin) to file /dev/null. and /dev/null is a file which throws away amy input that you give it as input.
		<copy the output address and paste in cat command>
		cat /var/lib/dpkg/info/bandit7.password
Level7->8:	cat data.txt | grep millionth
Level8->9:	cat data.txt | sort | uniq -u	or	sort data.txt |uniq -u
Level9->10:	
Level10->11:	
Level11->12:	cat data.txt | tr [a-z] [n-za-m] | tr [A-Z] [N-ZA-M]		#tr or translate command is used for translating a range of characters or squeezing similar characters and of many more use.
	or	cat data.txt | tr [a-zA-Z] [n-za-mN-ZA-M]	
Level12->13:	
Level13->14:	ssh -i sshkey.private bandit14@localhost	#Here -i is used as these are on same server.. Note here we are connecting to bandit14 user on host_name: localhost and not on bandit.overthewire... Synatax of conneting to user on same device: ssh -i <private_key_name> <username@hostname>
		#Now we're connected to bandit14 
		cd /etc/bandit_pass
		cat bandit14
Level14->15:	#check here: https://medium.com/@theGirlWhoEncrypts/overthewire-bandit-level-14-level-15-820b1a9fb3e2
Level15->16:	
Level16->17:	nmap -v -A -p 31000-32000 localhost	#Here we scan for all the open ports with 
	or	nmap -v -A -T4 -p 31000-32000 localhost	#Here we can see in output that only 2ports were providing ssl service(this is shown by using -A flag). Also note that without -v flag(verbosity), we can't see what's happening there in this command
		#on connecting with port:31518 through ssl, it prints the same string that we give input.So I tried connecting at port:31790
		openssl s_client -connect localhost:31790	#It connects us to the port 31790. and on giving input as password of bandit16, it shows us a private RSA key.
		#copy the RSA key displayed on the output and paste it in a file(newly created)
		#as given in lvl12, we do not have permission to write in home dir, so I created a dir in /tmp and created a file in that dir and I pasted the RSA key in that file
		mkdir /tmp/harsh
		cd /tmp/harsh
		touch private.key	#I pasted the RSA key in this file(RSA key that was obtained from connecting to port 31790)
		#To make this key private so that only user that created it can use it we change it's mode to600.You can read for chmod 600 or we use chmod 400 and chmod 600 on google
		chmod 600 private.key
		#Now I connected to bandit17 similar to as we did in lvl13
		ssh -i private.key bandit17@localhost
		#now we are logged in to bandit17.
		#As given in lvl14, password of every user is stored in /etc/bandit_pass/bandit<1..34>
		cat /etc/bandit_pass/bandit17	#it shows the password
Level17->18:	diff password.old password.new
		#it shows 2 ouputs which differ. one among which must be from old and one must be from new that is modified from old. So I tried grep for both on new file
		cat passwords.new | grep kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd
		#Output:	kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd
		cat passwords.new | grep w0Yfolrc5bwjS4qw5mq1nnQi6mF03bii
		#no output in this case which means only 1st one belongs to password.new and 1st one is the correct password
or
		diff password.new password.old
		#output:	< kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd    # From "passwords.new" file
		#		---
		#		> w0Yfolrc5bwjS4qw5mq1nnQi6mF03bii    # From "passwords.old" file
		#Lines preceded by a < are lines from the 1st file.
		#Lines preceded by a > are lines from the 2nd file.
		#The 3 dashes --- are merely separating the lines of 1st file from the 2nd file ones.
		#So we can note that 1st output is from 1st file, i.e- password.new	which means 1st output is correct password

Level18->19: 
Level19->20: 
Level20->21: 
Level21->22: 
Level22->23: 
Level23->24: 
Level24->25: 
Level25->26: 
Level26->27: 
Level27->28: 
Level28->29: 
Level29->30: 
Level30->31: 
Level31->32: 
Level32->33: 
Level33->34: 
