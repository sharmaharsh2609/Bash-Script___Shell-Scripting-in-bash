#As explained in lvl14-->15 password of every level is stored in /etc/bandit_pass/bandit(0..35)  But it can only be accessed by the same user. for eg- password of lvl14 can only be seen by user bandit14 


Level0:  ssh -port 2220 bandit0@bandit.labs.overthewire.org	# passwords are stored in a file named password	

Level0->1:	cat readme	#passwd is stored in this file 
Level1->2:	cat ./-		or	cat <full path of - >	#path of - file can be seen from pwd command. also - file can't be accessed directly using cat - as - is a special keyword used for stdin and stdout
Level2->3:	cat 'spaces in this filename'	or	cat spaces\ in\ this\ filename		#spaces acts as seperators. so we need to use backslash before every space in order to access space not as a keyword or we can write the whole file name in a quotes
Level3->4:	cd inhere
		ls -a
		cat .hidden
Level4->5:	cd inhere
		for x in {0..9}; do file ./-file0$x; done
		 cat ./-file07
Level5->6:	cd inhere
		find . -type f -size 1033c ! -executable #output: ./maybehere07/.file2
		cat <address in output of previous command> ie.- cat ./maybehere07/.file2
Level6->7:	find / -user bandit7 -group bandit6 -size 33c 2>/dev/null		# here because we do not have access to all the permissions, so this command will show a lot of errors also for permission denied and it will be difficult to search file in such messed up output. To resolve this issue, we use 2>/dev/null which redirects stderr(1 for stdout,2 for stderr, 3 for stdin) to file /dev/null. and /dev/null is a file which throws away amy input that you give it as input.
		<copy the output address and paste in cat command>
		cat /var/lib/dpkg/info/bandit7.password
Level7->8:	cat data.txt | grep millionth
Level8->9:	cat data.txt | sort | uniq -u	or	sort data.txt |uniq -u
Level9->10:	
Level10->11:	
Level11->12:	cat data.txt | tr [a-z] [n-za-m] | tr [A-Z] [N-ZA-M]		#tr or translate command is used for translating a range of characters or squeezing similar characters and of many more use.
	or	cat data.txt | tr [a-zA-Z] [n-za-mN-ZA-M]	
Level12->13:	
Level13->14:	ssh -i sshkey.private bandit14@localhost	#Here -i is used as these are on same server.. Note here we are connecting to bandit14 user on host_name: localhost and not on bandit.overthewire... Synatax of conneting to user on same device: ssh -i <private_key_name> <username@hostname>
		#Now we're connected to bandit14 
		cd /etc/bandit_pass
		cat bandit14
Level14->15:	#check here: https://medium.com/@theGirlWhoEncrypts/overthewire-bandit-level-14-level-15-820b1a9fb3e2
Level15->16:	
Level16->17:	nmap -v -A -p 31000-32000 localhost	#Here we scan for all the open ports with 
	or	nmap -v -A -T4 -p 31000-32000 localhost	#Here we can see in output that only 2ports were providing ssl service(this is shown by using -A flag). Also note that without -v flag(verbosity), we can't see what's happening there in this command
		#on connecting with port:31518 through ssl, it prints the same string that we give input.So I tried connecting at port:31790
		openssl s_client -connect localhost:31790	#It connects us to the port 31790. and on giving input as password of bandit16, it shows us a private RSA key.
		#copy the RSA key displayed on the output and paste it in a file(newly created)
		#as given in lvl12, we do not have permission to write in home dir, so I created a dir in /tmp and created a file in that dir and I pasted the RSA key in that file
		mkdir /tmp/harsh
		cd /tmp/harsh
		touch private.key	#I pasted the RSA key in this file(RSA key that was obtained from connecting to port 31790)
		#To make this key private so that only user that created it can use it we change it's mode to600.You can read for chmod 600 or we use chmod 400 and chmod 600 on google
		chmod 600 private.key
		#Now I connected to bandit17 similar to as we did in lvl13
		ssh -i private.key bandit17@localhost
		#now we are logged in to bandit17.
		#As given in lvl14, password of every user is stored in /etc/bandit_pass/bandit<1..34>
		cat /etc/bandit_pass/bandit17	#it shows the password
Level17->18:	diff password.old password.new
		#it shows 2 ouputs which differ. one among which must be from old and one must be from new that is modified from old. So I tried grep for both on new file
		cat passwords.new | grep kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd
		#Output:	kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd
		cat passwords.new | grep w0Yfolrc5bwjS4qw5mq1nnQi6mF03bii
		#no output in this case which means only 1st one belongs to password.new and 1st one is the correct password
or
		diff password.new password.old
		#output:	< kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd    # From "passwords.new" file
		#		---
		#		> w0Yfolrc5bwjS4qw5mq1nnQi6mF03bii    # From "passwords.old" file
		#Lines preceded by a < are lines from the 1st file.
		#Lines preceded by a > are lines from the 2nd file.
		#The 3 dashes --- are merely separating the lines of 1st file from the 2nd file ones.
		#So we can note that 1st output is from 1st file, i.e- password.new	which means 1st output is correct password

Level18->19:  #ssh allows us to execute commands in ssh statement by appending the desired command after the ssh command
		
		ssh -p 2220 bandit18@bandit.labs.overthewire.org ls -al
		ssh -p 2220 bandit18@bandit.labs.overthewire.org cat readme
or
		ssh -p 2220 -T bandit18@bandit.labs.overthewire.org  #Here -T flag disables the sudo terminal which means now last session will not be continued from where it is left and thus bashrc file is not changed and we'll be able to connect successfully 
or
		ssh -p 2220 bandit18@bandit.labs.overthewire.org /bin/bash
		#by using /bin/bash we do not use the bashrc file of the remote system. Instead we use our own bashrc for that and now we can write cat readme to see password

Level19->20:	(After connecting, we can see file named bandit20-do using ls. We can see it's permissions using ls -l. Here we can see that in place of x(for execution permission), it has s option which means that user id is set). While a user id is set, then user can have some more permissions on some files.
		ls
		file -l		# here we can see that it has permissions rwsr-r--- which means user id is set to this file which is bandit20
		./bandit20-do	#it shows us output that to run any command with user bandit20 in current user(that is bandit19), you need to execute this file before that command
		./bandit20-do cat /etc/bandit_pass/bandit20	#it will show password for next level
for more info:	 https://programmercave0.github.io/blog/2019/12/25/Bandit-Level-19-to-Level-20-OverTheWire

Level20->21:	ls
		ls -l	#it shows that file is setuid binary file
		./suconnect	#it shows us that we need to pass the the port_number after ./suconnect to connect to the desired port number

		#In the question it is given that if we make a connection with a port on localhost then if data sent throught that port is the password of lvl20 then it will send the password of lvl21 to that port.
		#To send this all data, we need to make a listener connection. We can do that by using nc
		
		#open another terminal on remote server.
		nc -l localhost -p 9999		#Here we create a TCP listener at port 9999
		#Now we need to execute the given sudo file(setuid file with privilleges) to make a connection
		./suconnect 9999	#it makes a connection with port 9999(If it is not working, then you can check if port is open or not using command: nc -v localhost <port_number>)
		#now type the passwd of bandit 20 in the listener terminal and hit enter. Now suconnect file will send the data(in this case it is password for bandit21) to the listener connection if the password of bandit20 is correct that the listener mode sent.
or
		#or we can simply send the password during making connection also as folllows:
		nc -l localhost -p 9999 < /etc/bandit_pass/bandit20
or like this:
		cat /etc/bandit_pass/bandit20 | nc -l localhost -p 9999 

Level21->22:	cd /etc/cron.d
		ls
		cat cronjob_bandit22
		#it executes a file named /usr/bin/cronjob_bandit22.sh. Let's see what is inside this file as this file is executing every minute, every hour as shown by all stars
		cat /usr/bin/cronjob_bandit22.sh
		#this file copies the password of bandit22 to the file /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
		cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv	#it shows the final password for next level

Level22->23:	cd /etc/cron.d
		ls
		cat cronjob_bandit23
		#it executes a file named /usr/bin/cronjob_bandit23.sh. Let's see what is inside this file as this file is executing every minute, every hour as shown by all stars
		cat /usr/bin/cronjob_bandit23.sh
		#this file stores the userid using whoami command in variable myname and then stores md5sum(which is an algorithm to store a value for any command or file which can be checked after a trasmission to check integrity) and then copies the password of bandit23 to the file /tmp/md5sum
		whoami	#output is bandit22 as it is current user id
		#note output for whoami is bandit22 which may causetrouble. Because this file is being executed in bandir23 user as seen in bandit23.
		#so use bandit23 here not bandit22
		echo I am user bandit23 | md5sum | cut -d ' ' -f 1
		#output is the hash for md5sum for this command and it copies the file into the md5sum(which is output) of this command
		cat /tmp/(hash for md5sum obtained from above command)	#it shows the final password for next level

Level23->24:	

Level24->25:	

Level25->26:	

Level26->27:	

Level27->28:	

Level28->29:	

Level29->30:	

Level30->31:	

Level31->32:	

Level32->33:	

Level33->34:	
